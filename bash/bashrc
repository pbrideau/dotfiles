declare -a TMUX_HOSTS
source $HOME/.dotfiles/bash/other/*

################################################################################
# Automatically start tmux when loging on server in $TMUX_HOSTS
# To add server to this list: TMUX_HOSTS+=('example.com')
# Force no tmux with this hack:
# TERM="no_tmux:$TERM" ssh host

if [[ "$TERM" =~ .*:.* ]]; then
  MY_ENV_OVERRIDE=${TERM%:*}
  TERM=${TERM##*:}
fi
export MY_ENV_OVERRIDE

if [ "$MY_ENV_OVERRIDE" != 'no_tmux' ]; then
  if  [ -z "$TMUX" ] && [ -n "$SSH_TTY" ] && [[ $- =~ i ]]; then
    if [[ "${TMUX_HOSTS[@]}" =~ "$HOSTNAME" ]]; then
      if [ "$(tmux list-sessions | grep attached | wc -l)" -lt "$(tmux list-sessions | wc -l)" ]; then
        tmux attach-session
        exit
      else
        tmux new-session
        exit
      fi
    fi
  fi
fi
unset MY_ENV_OVERRIDE


################################################################################
# Source profile.d if not login shell
if ! shopt -q login_shell ; then 
    umask 002
    SHELL=/bin/bash
    for i in /etc/profile.d/*.sh; do
        if [ -r "$i" ]; then
            if [ "$PS1" ]; then
                . "$i"
            else
                . "$i" >/dev/null
            fi
        fi
    done
    unset i
fi

################################################################################
# When using tmux:
if [ -n "$TMUX" ]; then
  settitle() {
      printf "\033k$1\033\\"
  }

  ssh() {
      settitle "$*"
      command ssh "$@"
      settitle "bash"
  }

  #MOTD:
  for word in $(tmux list-sessions); do
    if [[ "$word" =~ [0-9]:$ ]]; then
      echo
    fi
    echo -n " $word"
  done
  echo; echo
fi

################################################################################
# BASIC CONFIGS
NEW_PATH=(
  '~/.local/bin'
  '~/.rvm/bin'
)
for x in "${NEW_PATH[@]}"; do
  case ":$PATH:" in
    *":$x:"*) :;; # already there
    *) PATH="$x:$PATH";;
  esac
done
unset NEW_PATH

# are we an interactive shell?
if [ "$PS1" ]; then
  shopt -s histappend     # Turn on parallel history
  history -a
  shopt -s checkwinsize   # Turn on checkwinsize
  shopt -s cdspell        # Correct minor error in cd command
  shopt -s cmdhist        # Save multiple-line on the same line
  HISTFILE="${HOME}/.bash_history_dir/$(hostname)"
  HISTCONTROL=ignoreboth:erasedups
  HISTSIZE=10000
  HISTFILESIZE=10000

  export PROMPT_COMMAND="history -a; history -c; history -r;$PROMPT_COMMAND"
  tac "$HISTFILE" | awk '!x[$0]++' > /tmp/tmpfile && tac /tmp/tmpfile > "$HISTFILE"
  rm /tmp/tmpfile
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

################################################################################
# IS REBOOT REQUIRED?
if [ -e /etc/os-release ]; then
  OS="$(awk -F= '/^NAME/{print $2}' /etc/os-release)"
else
  OS="$(cat /etc/*-release | sort -u)"
fi

case "$OS" in
  *'Red Hat'*)
    # needs-restarting differ from version to version, check the kernel
    LAST_KERNEL=$(rpm -q --last kernel | perl -pe 's/^kernel-(\S+).*/$1/' | head -1)
    CURRENT_KERNEL=$(uname -r)
    if [ "$LAST_KERNEL" = "$CURRENT_KERNEL" ]; then
      REBOOT=""
    else
      REBOOT="(reboot) "
    fi
    ;;
  *'Debian'*)
    if [ -e /var/run/reboot-required -o -e /var/run/reboot-required.pkgs ]; then
      REBOOT="(reboot) "
    else
      REBOOT=""
    fi
    ;;
  *)
    REBOOT="(Unknown OS) "
    ;;
esac

################################################################################
# IS THERE PACKAGES TO UPDATES?
if [ -e $HOME/.update_count ]; then
  let UPDATE_CONTENT=$(cat $HOME/.update_count)
  if [ $UPDATE_CONTENT -eq 0 ]; then
    UPDATE_COUNT=""
  else
    UPDATE_COUNT="($UPDATE_CONTENT) "
  fi
fi
# Crontabs:
# Debian: nice -n 19 aptitude search "~U" | wc -l > $HOME/.update_count
# RedHat: nice -n 19 yum check-update | sed -n "/Obsoleting/q;p" | wc -l | awk '{print $1-3}' > $HOME/.update_count

################################################################################
# GIT
if [ -f "$HOME/git/bash-git-prompt/gitprompt.sh" ]; then
  GIT_PROMPT_ONLY_IN_REPO=0
  GIT_PROMPT_FETCH_REMOTE_STATUS=1
  GIT_PROMPT_IGNORE_SUBMODULES=0
  GIT_PROMPT_SHOW_UPSTREAM=1
  GIT_PROMPT_SHOW_UNTRACKED_FILES=all # can be no, normal or all;
  GIT_PROMPT_START="\n\[\033[31m\]${REBOOT}\[\033[01;33m\]${UPDATE_COUNT}\[\033[01;32m\]\h >\[\033[0m\] \[\033[01;34m\]\w\[\033[0m\]"
  GIT_PROMPT_END="\n\$ "

  source $HOME/git/bash-git-prompt/gitprompt.sh
fi

alias ga="git add"
alias gc="git commit"
alias gco="git checkout"
alias gst="git status"
alias glh="git log --date=short --format='%C(yellow)%h %Cblue%ad %Cgreen%<|(40)%an%Creset %s ' --follow"
alias glo="git log --graph --date=short --format='%C(yellow)%h %Cblue%ad%C(auto)%d%C(yellow) %Creset%s'"
alias gloa="git log --graph --date=short --format='%C(yellow)%h %Cblue%ad%C(auto)%d%C(yellow) %Creset%s' --all"
#alias glo="git log --oneline --decorate --tags --graph "
#alias gloa="git log --oneline --decorate --tags --graph --all"

################################################################################
# CHEAT
export CHEAT_CONFIG_PATH="~/.dotfiles/cheat/conf.yml"

################################################################################
# ALIASES
alias tmux='TERM=xterm-256color tmux'
alias genpass="tr -cd '[:alnum:]' < /dev/urandom | fold -w43 | head -n1"

if [ -x /usr/bin/gvim ]; then
  alias vi="vim --servername VIM --remote-tab-silent"
else
  alias vi='vim -p'
fi


# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

alias ll='ls -l'
alias la='ls -A'
alias l='ls -CF'

################################################################################
# RVM
if [ -s "$HOME/.rvm/scripts/rvm" ]; then
  source "$HOME/.rvm/scripts/rvm" 
  # Load RVM into a shell session *as a function*
fi


# vim: ff=sh ts=2 sw=2
