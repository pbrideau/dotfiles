#!/bin/bash
# shellcheck disable=SC1090,SC1091

################################################################################
# Source profile.d if not login shell
if ! shopt -q login_shell; then
	umask 002
	SHELL=/bin/bash
	for i in /etc/profile.d/*.sh; do
		if [ -r "$i" ]; then
			if [ "$PS1" ]; then
				. "$i"
			else
				. "$i" > /dev/null
			fi
		fi
	done
	unset i
fi

if [[ ! "$-" =~ i ]]; then
	return
fi

function add_path {
	# This is the redhat pathmunge()
	if ! echo "$PATH" | grep -E -q "(^|:)$1($|:)"; then
		if [ "$2" = "after" ]; then
			PATH=$PATH:$1
		else
			PATH=$1:$PATH
		fi
	fi
}

################################################################################
# PATH
add_path "/usr/local/sbin:/usr/sbin:/sbin"

################################################################################
# BASIC CONFIGS
if [ -d "$HOME/.local/bin" ]; then
	if [ "$(uname -m)" = "x86_64" ]; then
		add_path "$HOME/.local/bin"
	fi
fi

declare -a TMUX_HOSTS
declare -a AGENT_HOSTS
declare -a PIPCHK_HOSTS
declare -a GITCHK_HOSTS
if [ -d "$HOME/.bashrc_dir" ]; then
	for f in "${HOME}"/.bashrc_dir/*; do
		source "$f"
	done
fi

################################################################################
# Automatically start tmux when loging on server in $TMUX_HOSTS
# To add server to this list: TMUX_HOSTS+=('example.com')
# Force no tmux with this hack:
# TERM="no_tmux:$TERM" ssh host

if [[ "$TERM" =~ .*:.* ]]; then
	MY_ENV_OVERRIDE=${TERM%:*}
	TERM=${TERM##*:}
fi
export MY_ENV_OVERRIDE

if ! infocmp "$TERM" &> /dev/null; then
	# Make sure we do not break vim if screen-256color does not exists
	if [[ "$TERM" =~ screen ]]; then
		if infocmp "screen-256color" &> /dev/null; then
			TERM="screen-256color"
		elif infocmp "screen" &> /dev/null; then
			TERM="screen"
		elif infocmp "xterm" &> /dev/null; then
			TERM="xterm"
		fi
	else
		TERM="xterm"
	fi
fi

alias tmux='tmux -2' # Force 256colors
if [[ "${TMUX_HOSTS[*]}" =~ ${HOSTNAME%%.*} ]]; then
	if [ "$MY_ENV_OVERRIDE" != 'no_tmux' ]; then
		if [ -z "$TMUX" ] && [ -n "$SSH_TTY" ] && [[ $- =~ i ]]; then
			nsess_att="$(tmux list-sessions | grep -c attached)"
			nsess="$(tmux list-sessions | wc -l)"
			if [ "${nsess_att}" -lt "${nsess}" ]; then
				SESSION_TO_ATTACH="$(tmux list-sessions |
					grep -v attached |
					head -1 |
					cut -d ':' -f 1)"
				tmux attach-session -t "$SESSION_TO_ATTACH"
				exit
			else
				tmux new-session
				exit
			fi
		fi
	fi
fi
unset nsess_att nsess
unset MY_ENV_OVERRIDE
unset SESSION_TO_ATTACH

################################################################################
# When using tmux:
if [ -n "$TMUX" ]; then
	#MOTD:
	#tested on tmux >= 1.5
	CURRENT_SESSION_NAME="$(tmux list-panes -a |
		grep "$TMUX_PANE" |
		cut -d : -f 1):"
	for word in $(tmux list-sessions); do
		if [[ "$word" =~ [a-z0-9]+:$ ]]; then
			if [ "$word" = "$CURRENT_SESSION_NAME" ]; then
				echo -e "\033[1m"
			else
				echo -e "\033[0m"
			fi
		fi
		echo -n " $word"
	done
	echo
	echo
	unset CURRENT_SESSION_NAME
fi

################################################################################
# Set variables by OS
if [ -e /etc/redhat-release ]; then
	OS=$(cat /etc/redhat-release)
elif [ -e /etc/debian-release ]; then
	OS=$(cat /etc/debian-release)
elif [ -e /etc/os-release ]; then
	OS="$(awk -F= '/^NAME/{print $2}' /etc/os-release)"
else
	OS="$(uname)"
fi

case "$OS" in
	*'Red Hat'*)
		# needs-restarting differ from version to version
		(needs-restarting -r &> /dev/null)
		restart_rc=$?

		if [ "$restart_rc" -eq 0 ]; then
			REBOOT=""
		elif [ "$restart_rc" -eq 1 ]; then
			REBOOT="(reboot) "
		else
			# -r option not supported, check at least if the kernel has changed
			last_kernel=$(rpm -q --last kernel |
				perl -pe 's/^kernel-(\S+).*/$1/' |
				head -1)
			current_kernel=$(uname -r)
			if [ "$last_kernel" = "$current_kernel" ]; then
				REBOOT=""
			else
				REBOOT="(reboot) "
			fi
			unset last_kernel current_kernel
		fi
		unset restart_rc
		;;
	*'Debian'*)
		reboot_file1="/var/run/reboot-required"
		reboot_file2="/var/run/reboot-required.pkgs"
		if [ -e "${reboot_file1}" ] || [ -e "${reboot_file2}" ]; then
			REBOOT="(reboot) "
		else
			REBOOT=""
		fi
		unset reboot_file1 reboot_file2
		;;
	*'Solaris'* | *'SunOS'*)
		REBOOT=""
		;;
	*'CYGWIN'*)
		REBOOT=""
		;;
	*)
		REBOOT="(Unknown OS) "
		;;
esac

function refresh_history {
	#history -n
	#history -w
	#history -c
	#history -r
	history -a
}

# are we an interactive shell?
if [ "$PS1" ]; then
	shopt -s histappend # Turn on parallel history
	#history -a
	shopt -s checkwinsize # Turn on checkwinsize
	shopt -s cdspell      # Correct minor error in cd command
	shopt -s cmdhist      # Save multiple-line on the same line
	HISTFILE="${HOME}/.bash_history_dir/${HOSTNAME%%.*}"
	HISTCONTROL=ignoreboth:erasedups
	HISTSIZE=10000
	HISTFILESIZE=10000
	HISTTIMEFORMAT='%F %T '
	HISTIGNORE='history*'

	if [[ ! "$PROMPT_COMMAND" =~ refresh_history ]]; then
		export PROMPT_COMMAND="refresh_history;$PROMPT_COMMAND"
	fi

	#Remove duplicated entries in .bash_history
	#unset HISTTIMEFORMAT
	#if [ -e "$HISTFILE" ]; then
	#	if command -v tac &> /dev/null; then
	#		TEMP_FILE=$(mktemp "$HOME/.bash_history_dir/tmp.XXXXXX")
	#		tac "$HISTFILE" | awk '!x[$0]++' > "$TEMP_FILE" &&
	#			tac "$TEMP_FILE" > "$HISTFILE"
	#		rm "$TEMP_FILE"
	#		unset TEMP_FILE
	#	fi
	#fi
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
	if [ -f /usr/share/bash-completion/bash_completion ]; then
		. /usr/share/bash-completion/bash_completion
	elif [ -f /etc/bash_completion ]; then
		. /etc/bash_completion
	fi
fi

################################################################################
# IS THERE PACKAGES TO UPDATES?

#Start update in the background if cache is older than 12 hours
# Used in:
#   update_count
#   pipchk_count
#   gitchk_count
UPD_CACHE_TMOUT="43200"

function background_check_update {
	cache="$1"
	tmp_file=$(mktemp)
	cmd_head='timeout 30s nice -n 19'

	if [ -e /etc/redhat-release ]; then
		OS=$(cat /etc/redhat-release)
	elif [ -e /etc/debian-release ]; then
		OS=$(cat /etc/debian-release)
	elif [ -e /etc/os-release ]; then
		OS="$(awk -F= '/^NAME/{print $2}' /etc/os-release)"
	else
		OS="$(uname)"
	fi
	case "$OS" in
		*'Red Hat'*)
			pkg_cmd=$($cmd_head yum check-update --quiet 2> /dev/null)
			pkg_rc="$?"
			if [ "$pkg_rc" = 100 ]; then
				#Returns exit value of 100 if there are packages available for an  update.
				#Returns 0 if no packages are available for update.
				#Returns 1 if an error occurred.
				pkg_rc=0
			fi
			;;
		*'Debian'*)
			#pkg_cmd=$($cmd_head aptitude search '~U' 2> /dev/null)
			pkg_cmd=$($cmd_head apt-get -q -y --ignore-hold \
				--allow-change-held-packages --allow-unauthenticated -s dist-upgrade |
				grep ^Inst | cut -d\  -f2 | sort)
			pkg_rc="$?"
			;;
	esac

	if [ "$pkg_rc" = 0 ]; then
		pkg_count=$(echo -n "$pkg_cmd" | wc -l)
		echo "$pkg_count" > "$tmp_file"
	else
		echo '-2' > "$tmp_file"
	fi

	mv "$tmp_file" "$cache"
}
export -f background_check_update

function update_count {
	case "$OS" in
		*'Solaris'* | *'SunOS'* | *'CYGWIN'*)
			exit
			;;
		*'Red Hat'* | *'Debian'*) ;;
		*)
			echo -ne "\033[1;33m(os:\033[0;31munknown\033[1;33m) "
			exit
			;;
	esac
	force=${1:-no}
	cache="$HOME/.update_count_dir/${HOSTNAME%%.*}"
	declare update_content

	last_mod=$(stat --print="%Y" "${cache}")
	now_epoch=$(date +%s)
	cache_time=$((now_epoch - last_mod))

	update_content=$(cat "$cache")
	if [ "$update_content" = '-2' ] && [ "$force" != 'force' ]; then
		:
		# Do not attempt to update if there was an error previously
	elif [ "$cache_time" -gt "$UPD_CACHE_TMOUT" ] || [ "$force" = "force" ]; then
		echo '-1' > "$cache"
		nohup bash -c "background_check_update '$cache'" &> /dev/null &
		disown
	fi

	update_content=$(cat "$cache")
	if [[ ! "$update_content" =~ -?[0-9]+ ]]; then
		echo -ne "\033[1;33m(os:\033[0;31mNaN\033[1;33m) "
	elif [ "$update_content" -gt 0 ]; then
		echo -ne "\033[1;33m(os:$update_content) "
	elif [ "$update_content" = '-1' ]; then
		echo -ne "\033[1;33m(os:--) "
	elif [ "$update_content" = '-2' ]; then
		echo -ne "\033[1;33m(os:==) "
	fi
}
# Crontabs:
# Debian: nice -n 19 aptitude search "~U" | wc -l > $HOME/.update_count
# RedHat: nice -n 19 yum check-update | sed -n "/Obsoleting/q;p" | wc -l | awk '{print $1-3}' > $HOME/.update_count

# shellcheck disable=SC2120  # Argument is optional, have default value
function pipchk_count {
	force=${1:-no}
	cache="$HOME/.pipchk_count"
	declare -i pipchk_content

	if [[ "${PIPCHK_HOSTS[*]}" =~ ${HOSTNAME%%.*} ]]; then
		last_mod=$(stat --print="%Y" "${cache}")
		now_epoch=$(date +%s)
		cache_time=$((now_epoch - last_mod))

		if [ "$cache_time" -gt "$UPD_CACHE_TMOUT" ] || [ "$force" = "force" ]; then
			echo "-1" > "$cache"
			nohup nice -n 19 pipchk &> /dev/null &
			disown
		fi
	fi

	pipchk_content=$(cat "$cache")
	if [ "$pipchk_content" -gt 0 ]; then
		echo -e "\033[1;33m(pip:$pipchk_content) "
	elif [ "$pipchk_content" = '-1' ]; then
		echo -e "\033[1;33m(pip:--) "
	fi
}
# Crontabs:
# $HOME/.local/bin/pipchk &>/dev/null

# shellcheck disable=SC2120  # Argument is optional, have default value
function gitchk_count {
	force=${1:-no}
	cache="$HOME/.gitchk_count"
	declare -i gitchk_content

	if [[ "${GITCHK_HOSTS[*]}" =~ ${HOSTNAME%%.*} ]]; then
		last_mod=$(stat --print="%Y" "${cache}")
		now_epoch=$(date +%s)
		cache_time=$((now_epoch - last_mod))

		#Start cache update in the background if is older than 12 hours
		if [ "$cache_time" -gt "$UPD_CACHE_TMOUT" ] || [ "$force" = "force" ]; then
			echo "-1" > "$cache"
			nohup nice -n 19 gitchk &> /dev/null &
			disown
		fi
	fi

	gitchk_content=$(cat "$cache")
	if [ "$gitchk_content" -gt 0 ]; then
		echo -e "\033[1;33m(git:$gitchk_content) "
	elif [ "$gitchk_content" = '-1' ]; then
		echo -e "\033[1;33m(git:--) "
	fi
}
# Crontabs:
# PATH in crontab must be set to run lastversion (~/.local/bin)
# $HOME/.local/bin/gitchk &>/dev/null

################################################################################
# SSH CONFIG
if [ -d "${HOME}/.ssh/config.d" ]; then
	echo '# AUTOGENERATED during .bashrc load' > ~/.ssh/config
	for i in "$HOME/.ssh/config.d/"*; do
		echo "#$i" >> ~/.ssh/config
		cat "$i" >> ~/.ssh/config
	done
fi

################################################################################
# SSH_AGENT
function check_ssh_agent {
	if [ -n "$SSH_AUTH_SOCK" ]; then
		if [ -e "$SSH_AUTH_SOCK" ]; then
			_=$(ssh-add -l &> /dev/null)
			local ssh_rc=$?

			if [ "$ssh_rc" -eq 0 ]; then
				return
			elif [ "$ssh_rc" -eq 1 ]; then
				# Only automatically add identity when host is in AGENT_HOSTS list
				if [[ "${AGENT_HOSTS[*]}" =~ ${HOSTNAME%%.*} ]]; then
					echo
					echo -e "\033[01;33mcheck_ssh_agent(): No identity in agent\033[0m"
					echo -e "\033[01;33m Running \033[01;31mssh-add\033[0m"
					ssh-add
				fi
				return
			elif [ "$ssh_rc" -eq 2 ]; then
				# ssh_rc == 2: Error connecting to agent: Connection refused
				echo
				echo -e "\033[01;33mcheck_ssh_agent(): Agent appear to be stale\033[0m"
				echo -e "\033[01;33m Deleting \033[0;31m${SSH_AUTH_SOCK%/*}\033[0m"
				rm -rf "${SSH_AUTH_SOCK%/*}"
				unset SSH_AUTH_SOCK
			fi
		fi
	fi

	# Try to use an existing ssh_agent
	declare -a agents
	if [ "$(find /tmp -type d -name 'ssh-*' 2> /dev/null | wc -l)" -gt 0 ]; then
		while IFS= read -r -d $'\0'; do
			agents+=("$REPLY")
		done < <(find /tmp/* -name 'agent.*' -user "$USER" -print0 2> /dev/null)
	fi

	if [ "${#agents[@]}" -gt 0 ]; then
		# Pick the first you find
		export SSH_AUTH_SOCK="${agents[0]}"
		export SSH_AGENT_PID="$((${SSH_AUTH_SOCK#*.} + 1))"
		# shellcheck disable=SC2009
		if ! ps -p "$SSH_AGENT_PID" | grep ssh-agent &> /dev/null; then
			#Sometimes, there is no ssh-agent process, but SSH_AUTH_SOCK is managed
			#ForwardAgent ssh_config or MobaXterm
			unset SSH_AGENT_PID
		fi
		# Recursively check if this new found agent is broken
		check_ssh_agent
	else
		if [[ "${AGENT_HOSTS[*]}" =~ ${HOSTNAME%%.*} ]]; then
			eval "$(ssh-agent -s -t 12h)" > /dev/null
			echo
			echo -e "\033[01;33mcheck_ssh_agent(): new ssh-agent started\033[0m"
			echo -e "\033[01;33m Running \033[01;31mssh-add\033[0m"
			ssh-add
		fi
	fi
}

# Start ssh-agent on AGENT_HOSTS server list
check_ssh_agent
if [[ ! "$PROMPT_COMMAND" =~ check_ssh_agent ]]; then
	export PROMPT_COMMAND="check_ssh_agent;$PROMPT_COMMAND"
fi

# Notify if more than one agent is running
declare -a agents
while IFS= read -r -d $'\0'; do
	agents+=("$REPLY")
done < <(find /tmp/ssh-* -name 'agent.*' -user "$USER" -print0 2> /dev/null)

if [ "${#agents[@]}" -gt 1 ]; then
	echo -e "\033[01;33mMore than one ssh-agent running\033[0m"
fi
unset agents

function prompt_ssh_agent {
	if [ -e "$SSH_AUTH_SOCK" ]; then
		echo -ne "\033[1;36m@"
		if ssh-add -l &> /dev/null; then
			echo -n "+"
		fi
		echo -ne "\033[0m "
	fi
}
#PROMPT_SSH_AGENT="test -e \"\$SSH_AUTH_SOCK\" && echo -n \"@\""
#PROMPT_SSH_AGENT+="&& \$(ssh-add -l &>/dev/null) && echo -n \"+\""
# You can add this to ~/.ssh/config:
#      Host SERVERNAME
#      ForwardAgent yes

################################################################################
# PROMPT
if [ -z "$HOSTNAME_COLOR" ]; then
	HOSTNAME_COLOR="\033[01;32m"
fi
if [ -z "$PROMPTBOX_COLOR" ]; then
	PROMPTBOX_COLOR="\033[0m"
fi

function prompt_line {
	printf "%${COLUMNS:-$(tput cols)}s" | sed "s/ /─/g" 2> /dev/null
}

function prompt_reboot {
	if [ "$REBOOT" != "" ]; then
		echo -e "\033[33m${REBOOT}"
	fi
}

function prompt_last_rc {
	if [ "${GIT_PROMPT_LAST_COMMAND_STATE:-0}" != 0 ]; then
		echo -ne "${PROMPTBOX_COLOR}┤ "
		echo -ne "\033[31m**$GIT_PROMPT_LAST_COMMAND_STATE**\033[0m "
		echo -ne "${PROMPTBOX_COLOR}├─"
	fi
}
function prompt_loadavg {
	loadavg15=$(uptime | awk '{print $NF}' | tr "," " ")
	if command -v nproc &> /dev/null; then
		nproc=$(nproc)
	elif [ -f /proc/cpuinfo ]; then
		nproc=$(grep -c 'processor' /proc/cpuinfo)
	elif command -v kstat &> /dev/null; then
		nproc=$(kstat -p cpu_info 2> /dev/null | grep -c 'device_ID')
	fi
	if [ -n "$nproc" ]; then
		if (($(echo "if ($loadavg15 > $nproc) 1" | bc -l))); then
			local uptime
			uptime=$(uptime | awk '{print $(NF-2)" "$(NF-1)" "$(NF-0)}')
			echo -ne "${PROMPTBOX_COLOR}┤ "
			echo -ne "\033[1;31m load: ${uptime}\033[0m "
			echo -ne "${PROMPTBOX_COLOR}├─"
		fi
	fi
}
function prompt_box {
	local s
	s="$(prompt_ssh_agent)"
	s+="$(prompt_reboot)"
	if [ -e "$HOME/.update_count_dir/${HOSTNAME%%.*}" ]; then
		s+="$(update_count)"
	else
		mkdir -p "$HOME/.update_count_dir"
		cache_file="$HOME/.update_count_dir/${HOSTNAME%%.*}"
		echo "0" > "$cache_file"
		update_count force &> /dev/null
		unset cache_file
	fi
	if [ -e "$HOME/.pipchk_count" ]; then
		s+="$(pipchk_count)"
	fi
	if [ -e "$HOME/.gitchk_count" ]; then
		s+="$(gitchk_count)"
	fi

	if [ -n "$s" ]; then
		echo -ne "${PROMPTBOX_COLOR}┤ "
		echo -n "$s"
		echo -ne "${PROMPTBOX_COLOR}├─"
	fi
}

function set_ps1_line1 {
	echo "\[${PROMPTBOX_COLOR}\]"
	echo -n "\[\033[s\]"      #save cursor position
	echo -n "\$(prompt_line)" #Display line wideness of term

	### Display current time on right hand side (is already at EOL)
	echo -n "\[\033[17D\]" #go back 17 char
	echo -n "\[${PROMPTBOX_COLOR}\]┤ \[\033[1;33m\]\D{%b %d %R}"
	echo -n "\[${PROMPTBOX_COLOR}\] ├┄"
	echo -n "\[\033[u\]" # restore cursor position

	echo -n "\[${PROMPTBOX_COLOR}\]┌\$(prompt_last_rc)"
	echo -n "\$(prompt_loadavg)\$(prompt_box)"
}
function set_ps1_line2 {
	echo
	echo -n "\[${PROMPTBOX_COLOR}\]│ \[\033[01;32m\]\u\[\033[1;0m\]@"
	echo -n "\[${HOSTNAME_COLOR}\]\h\[\033[0m\]:"
	echo -n "\[\033[01;34m\]\w\[\033[0m\]"
}
function set_ps1_line3 {
	echo
	echo -n "\[${PROMPTBOX_COLOR}\]╰\[\033[0m\] \$ "
}

function toggle_prompt {
	if [ "${CUSTOM_PROMPT:-true}" = false ]; then
		export CUSTOM_PROMPT=true
		export GIT_PROMPT_DISABLE=0
		export GIT_PROMPT_ONLY_IN_REPO=0
		PS1=$(set_ps1_line1)
		PS1+=$(set_ps1_line2)
		PS1+=$(set_ps1_line3)
	else
		if [[ -e "$(git rev-parse --git-dir 2> /dev/null)" ]]; then
			# TODO: Why the toggle does not work within a git repository?
			#       The function from bash-git-prompt itself (git_prompt_toggle)
			#       does not work either
			echo "toggle_prompt(): cannot switch prompt from within git repo"
			echo "                 move outside of git repo before toggling"
			return
		else
			export CUSTOM_PROMPT=false
			export GIT_PROMPT_DISABLE=1
			export GIT_PROMPT_ONLY_IN_REPO=1
			PS1="\[\033[01;32m\]\u\[\033[1;0m\]@"
			PS1+="\[${HOSTNAME_COLOR}\]\h\[\033[0m\]:"
			PS1+="\[\033[01;34m\]\w"
			PS1+="\[\033[0m\]\$ "
			export PS1
		fi
	fi

}

SUDO_PS1="\[\033[0m\]\n"
SUDO_PS1+="\[\033[01;31m\]\u\[\033[1;0m\]@"
SUDO_PS1+="\[${HOSTNAME_COLOR}\]\h\[\033[0m\]:"
SUDO_PS1+="\[\033[01;34m\]\w"
SUDO_PS1+="\[\033[0m\]# "
export SUDO_PS1

################################################################################
# GIT
if [ -f "$HOME/git/bash-git-prompt/gitprompt.sh" ]; then
	export GIT_PROMPT_ONLY_IN_REPO=0
	export GIT_PROMPT_FETCH_REMOTE_STATUS=1
	export GIT_PROMPT_IGNORE_SUBMODULES=0
	export GIT_PROMPT_SHOW_UPSTREAM=1
	export GIT_PROMPT_SHOW_UNTRACKED_FILES=all # can be no, normal or all;
	export GIT_PROMPT_LEADING_SPACE=0

	export GIT_PROMPT_PREFIX="${PROMPTBOX_COLOR}┤ "
	export GIT_PROMPT_SUFFIX=" ${PROMPTBOX_COLOR}├"

	GIT_PROMPT_START=$(set_ps1_line1)
	GIT_PROMPT_END=$(set_ps1_line2)
	GIT_PROMPT_END+=$(set_ps1_line3)

	export GIT_PROMPT_START
	export GIT_PROMPT_END

	source "$HOME/git/bash-git-prompt/gitprompt.sh"
else
	# CAPTURE LAST RETURN CODE
	#   Only add if the bash-git-prompt is not loaded
	#   Variable GIT_PROMPT_LAST_COMMAND_STATE is used in custom PS1
	function setLastCommandState {
		local RETVAL="${?}"
		if [[ "${RETVAL}" -gt 128 ]] 2> /dev/null; then
			GIT_PROMPT_LAST_COMMAND_STATE=$(
				kill -l "$((RETVAL - 128))" 2> /dev/null || echo "$RETVAL"
			)
		else
			GIT_PROMPT_LAST_COMMAND_STATE="$RETVAL"
		fi
	}
	if [[ ! "$PROMPT_COMMAND" =~ setLastCommandState ]]; then
		PROMPT_COMMAND="setLastCommandState;$PROMPT_COMMAND"
	fi

	PS1=$(set_ps1_line1)
	PS1+=$(set_ps1_line2)
	PS1+=$(set_ps1_line3)
fi

alias ga="git add"
alias gc="git commit"
alias gd="git diff"
alias gds="git diff --staged"
alias gco="git checkout"
alias gst="git status"
alias grst="git reset"
alias glh="git log \
	--date=short \
	--format='%C(yellow)%h %Cblue%ad %Cgreen%<|(40)%an%Creset %s ' \
	--follow"
alias glo="git log \
	--graph \
	--date=short \
	--format='%C(yellow)%h %Cblue%ad %Cgreen%an %C(auto)%d%C(yellow) %Creset%s'"
alias gloa="git log \
	--graph \
	--date=short \
	--format='%C(yellow)%h %Cblue%ad %Cgreen%an %C(auto)%d%C(yellow) %Creset%s' \
	--all"
#alias glo="git log --oneline --decorate --tags --graph "
#alias gloa="git log --oneline --decorate --tags --graph --all"

export GIT_CEILING_DIRECTORIES="$HOME:/home"
export GIT_EDITOR=vim
export GIT_PAGER='less -R'

################################################################################
# CHEAT
export CHEAT_CONFIG_PATH="$HOME/.dotfiles/cheat/conf.yml"
export CHEAT_USE_FZF=true
if [ -e "$HOME/git/cheat/script/cheat.bash" ]; then
	source "$HOME/git/cheat/scripts/cheat.bash"
fi

################################################################################
# TLDR
complete -W "$(tldr 2> /dev/null --list)" tldr
export TLDR_HEADER='magenta bold underline'
export TLDR_QUOTE='italic'
export TLDR_DESCRIPTION='green'
export TLDR_CODE='red'
export TLDR_PARAM='blue'

################################################################################
# ALIASES
alias genpass="tr -cd '[:alnum:]' < /dev/urandom | fold -w43 | head -n1"

if [ -x /usr/bin/gvim ]; then
	alias vi="vim --servername VIM --remote-tab-silent"
else
	alias vi='vim'
fi

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
	if [ -r ~/.dircolors ]; then
		eval "$(dircolors -b ~/.dircolors)"
	else
		eval "$(dircolors -b)"
	fi
	alias ls='ls --color=auto'
	if grep --color "a" <<< "a" &> /dev/null; then
		alias grep='grep --color=auto'
		alias fgrep='fgrep --color=auto'
		alias egrep='egrep --color=auto'
	fi
fi

alias ll='ls -l'
alias la='ls -la'
alias l='ls -ltr'

alias psgrep='ps -ef | grep -v grep | grep'
if echo 'aa' | grep --color=no a &> /dev/null; then
	alias nocomment='grep --color=no "^[^#;$]"'
else
	alias nocomment='grep "^[^#;$]"'
fi

alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'

alias ldapsearch='ldapsearch -LLL -Q -o ldif-wrap=no'

if ! command -v lsof &> /dev/null; then
	message="\033[01;33m Running \033[01;31mfuser -cu"
	message+="\033[01;33m as lsof does not exists on this system\033[0m"

	# shellcheck disable=SC2139
	# I know the $message variable is expanded when defined, this is what i want
	alias lsof="echo;echo -e \"$message\";echo; fuser -cu"
	unset message
fi

################################################################################
# COLORED MANPAGES
function man {
	LESS_TERMCAP_md=$'\e[01;31m' \
		LESS_TERMCAP_me=$'\e[0m' \
		LESS_TERMCAP_se=$'\e[0m' \
		LESS_TERMCAP_so=$'\e[01;44;33m' \
		LESS_TERMCAP_ue=$'\e[0m' \
		LESS_TERMCAP_us=$'\e[01;32m' \
		command man "$@"
}

################################################################################
# FZF
if [[ "$-" =~ i ]]; then
	if [ -d "$HOME/git/fzf" ]; then
		source "$HOME/git/fzf/shell/completion.bash"
		source "$HOME/git/fzf/shell/key-bindings.bash"
	elif [ -e "/usr/share/doc/fzf/examples/key-bindings.bash" ]; then
		source /usr/share/doc/fzf/examples/key-bindings.bash
	fi
fi

################################################################################
# RVM
if [ -s "$HOME/.rvm/scripts/rvm" ]; then
	source "$HOME/.rvm/scripts/rvm"
	# Load RVM into a shell session *as a function*
fi

################################################################################
# PYENV
if [ -d "$HOME/git/pyenv" ]; then
	if [ "$(uname -p)" = "x86_64" ]; then
		export PYENV_ROOT="$HOME/git/pyenv"
		add_path "$PYENV_ROOT/bin"
		if command -v pyenv 1> /dev/null 2>&1; then
			eval "$(pyenv init --path)"
		fi
	fi
fi

################################################################################
# GO
if command -v go &> /dev/null; then
	export GOPATH="${HOME}/.local"
fi

################################################################################
# Moonlander Keyboard auto-compile
if command -v wally-cli &> /dev/null; then
	function auto-wally {
		LAYOUT_ID='5yYL6'
		ORYX_URL="https://oryx.zsa.io/${LAYOUT_ID}/latest/binary"
		MOONLANDER_FIRMWARE=/tmp/latest-moonlander-layout.bin
		wget --quiet "$ORYX_URL" -O "$MOONLANDER_FIRMWARE"
		wally-cli "$MOONLANDER_FIRMWARE" 2> /dev/null
		rm -f "$MOONLANDER_FIRMWARE"
	}
fi

unset add_path
# vim: ff=sh ts=2 sw=2

if [ -d "/opt/vagrant/" ]; then
	VAGRANT_COMPLETION=$(find /opt/vagrant -name completion.sh)
	source "$VAGRANT_COMPLETION"
fi
