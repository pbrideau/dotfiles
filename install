#!/bin/bash -

set -o nounset

err="[$(tput setaf 1)✘$(tput sgr0)]"
ok="[$(tput setaf 2)✔$(tput sgr0)]"

function create_link {
	local target=$1
	local link_name=$2
	if [ ! -f "${link_name}" ] && [ ! -L "${link_name}" ]; then
		ln -s "$target" "${link_name}"
		echo "$ok ${link_name}: done"
	elif [ -L "${link_name}" ] && [ ! -e "${link_name}" ]; then
		rm "${link_name}"
		ln -s "$target" "${link_name}"
		echo -e "$ok ${link_name}: is broken, creating it again"
	elif [ ! -L "${link_name}" ]; then
		echo -ne "$err ${link_name}: already exists but is not a symlink: "
		echo "delete before running this script again"
	fi
}

################################################################################
# GIT
mkdir -p "$HOME/git"

if [ ! -d "$HOME/git/bash-git-prompt/" ]; then
	git clone https://github.com/magicmonty/bash-git-prompt.git \
		"$HOME/git/bash-git-prompt" &&
		echo -e "$ok git-bash-prompt: git clone succeded"
fi

create_link ".dotfiles/git/gitconfig" "$HOME/.gitconfig"
create_link ".dotfiles/git/gitignore" "$HOME/.gitignore"
create_link ".dotfiles/inputrc" "$HOME/.inputrc"

if ! command -v pre-commit &> /dev/null; then
	echo -e "$err pre-commit is not installed, to do so:"
	echo " $ pip3 install --user pre-commit"
fi

################################################################################
# BASH
mkdir -p "$HOME/.bash_history_dir"
mkdir -p "$HOME/.bashrc_dir"
mkdir -p "$HOME/scripts"

create_link ".dotfiles/bash/bashrc" "$HOME/.bashrc"
create_link "../.dotfiles/bash/lslast" "$HOME/.bashrc_dir/lslast"

if ! command -v cheat &> /dev/null; then
	echo -e "$err cheat is not installed, to do so:"
	url="https://github.com/cheat/cheat/releases/download/"
	url+="4.2.0/cheat-linux-amd64.gz"
	echo " $ wget $url"
fi

if [ ! -d "$HOME/git/cheatsheets/" ]; then
	git clone https://github.com/cheat/cheatsheets.git "$HOME/git/cheatsheets" &&
		echo -e "$ok cheatsheets: git clone succeded"
fi

################################################################################
# VIM

mkdir -p "$HOME/.vim/autoload"
create_link ".dotfiles/vim/vimrc" "$HOME/.vimrc"
create_link "../.dotfiles/vim/templates" "$HOME/.vim/templates"
create_link "../.dotfiles/vim/colors" "$HOME/.vim/colors"

if [ ! -f "$HOME/.vim/autoload/plug.vim" ]; then
	curl -fLo "$HOME/.vim/autoload/plug.vim" --create-dirs \
		https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim &&
		vim +PlugInstall +qall &&
		echo -e "$ok vim plug: installation succeded"
fi

if ! command -v shellcheck &> /dev/null; then
	url="https://github.com/koalaman/shellcheck/releases/download/stable/"
	url+="/shellcheck-stable.linux.x86_64.tar.xz"
	echo -e "$err shellcheck is not installed, to do so:"
	echo " $ wget $url"
fi

if ! command -v bashate &> /dev/null; then
	echo -e "$err bashate is not installed, to do so:"
	echo " $ pip3 install --user bashate"
fi
if ! command -v shfmt &> /dev/null; then
	url="https://github.com/mvdan/sh/releases/download/v3.2.0/"
	url+="shfmt_v3.2.0_linux_amd64"
	echo -e "$err shfmt is not installed, to do so:"
	echo " $ wget $url"
fi

if ! command -v docopts &> /dev/null; then
	url="https://github.com/docopt/docopts/releases/download/v0.6.3-rc2/"
	url+="docopts_linux_amd64"
	echo -e "$err docpots is not installed, to do so:"
	echo " $ wget $url"
fi

if ! command -v markdownlint &> /dev/null; then
	echo -e "$err markdownlint is not installed, to do so:"
	echo " $ npm install markdownlint-cli"
	echo "OR with nodeenv"
	echo " $ nodeenv ~/.local/lib/markdownlint"
	echo " $ cd ~/.local/lib/markdownlint"
	echo " $ source bin/activate"
	echo " $ npm install markdownlint-cli"
	echo " $ deactivate_node"
	echo " $ echo '#!/bin/bash' > ~/.local/bin/markdownlint"
	echo -n " $ echo 'source \$HOME/.local/lib/markdownlint/bin/activate'"
	echo " >> ~/.local/bin/markdownlint"
	echo -n " $ echo '\$HOME/.local/lib/markdownlint/node_modules/"
	echo "markdownlint-cli/markdownlint.js \$@' >> ~/.local/bin/markdownlint"
	echo " $ chmod +x ~/.local/bin/markdownlint"
fi

if ! command -v proselint &> /dev/null; then
	echo -e "$err proselint is not installed, to do so:"
	echo " $ pip3 install --user proselint"
fi

################################################################################
# PACKAGE CHECKER
create_link "../../.dotfiles/scripts/pipchk" "$HOME/.local/bin/pipchk"
create_link "../../.dotfiles/scripts/gitchk" "$HOME/.local/bin/gitchk"
create_link ".dotfiles/scripts/pipchkrc" "$HOME/.pipchkrc"
create_link ".dotfiles/scripts/gitchkrc" "$HOME/.gitchkrc"

################################################################################
# TMUX
create_link ".dotfiles/tmux.conf" "$HOME/.tmux.conf"

# EDITORCONFIG
create_link ".dotfiles/editorconfig" "$HOME/.editorconfig"

# DIGRC
create_link ".dotfiles/digrc" "$HOME/.digrc"

# PROSELINT
create_link ".dotfiles/proselintrc" "$HOME/.proselintrc"

################################################################################
# AWESOME WINDOW MANAGER
create_link "../.dotfiles/awesome" "$HOME/.config/awesome"

if [ ! -d "$HOME/git/awesome-lain" ]; then
	git clone https://github.com/lcpz/lain.git "$HOME/git/awesome-lain" &&
		echo -e "$ok vim awesome-lain: git clone succeded"
fi

create_link "$HOME/git/awesome-lain" "$HOME/.config/awesome/lain"
