" Don't try to be vi compatible
set nocompatible

" Helps force plugins to load correctly when it is turned back on below
filetype off

" TODO: Load plugins here (pathogen or vundle)
"execute pathogen#infect()
call plug#begin('~/.vim/plugged')
Plug 'preservim/nerdtree'
Plug 'majutsushi/tagbar'
Plug 'edkolev/tmuxline.vim'
Plug 'vim-airline/vim-airline'
Plug 'xolox/vim-easytags'
Plug 'xolox/vim-misc'
Plug 'tpope/vim-fugitive'
Plug 'jlanzarotta/bufexplorer'
Plug 'gergap/ShowMarks'
"Plug 'vim-scripts/AutoComplPop'
Plug 'tpope/vim-ragtag'
Plug 'chrisbra/matchit'
Plug 'junegunn/fzf'

"""" Organize
"Plug 'hsitz/VimOrganizer'
Plug 'jceb/vim-orgmode'
Plug 'tpope/vim-speeddating'
Plug 'mattn/calendar-vim'

"""" Format
Plug 'vim-syntastic/syntastic'
Plug 'Chiel92/vim-autoformat'
Plug 'editorconfig/editorconfig-vim'
Plug 'vim-scripts/SyntaxRange'

"""" Tests
Plug 'vim-test/vim-test'
Plug 'tpope/vim-dispatch'
"Plug 'sheerun/vim-polyglot', { 'tag': 'v4.15.1' } "https://github.com/sheerun/vim-polyglot/issues/616
"Plug 'dpelle/vim-Grammalecte'

"""" Languages
Plug 'WolfgangMehner/bash-support'
"Plug 'pearofducks/ansible-vim'
Plug 'chase/vim-ansible-yaml'
call plug#end()

" For plugins to load correctly
filetype plugin indent on

set foldenable
set foldmethod=marker
au FileType sh let g:sh_fold_enabled=1
au FileType sh let g:is_bash=1
au FileType sh set foldmethod=syntax foldclose=all foldlevel=0 foldopen=quickfix,search,tag,undo,mark,hor,block
au FileType puppet set foldmethod=syntax foldclose=all foldlevel=1 foldopen=quickfix,search,tag,undo,mark,hor,block
au FileType xml,xsd set foldmethod=syntax foldclose=all foldlevel=1 foldopen=quickfix,search,tag,undo,mark,hor,block

syntax enable

" TODO: Pick a leader key
let mapleader = ";"
let maplocalleader = ","

" Security
set modelines=0

" Show line numbers
set number

" Show file stats
set ruler

" Blink cursor on error instead of beeping (grr)
"set visualbell

" Encoding
set encoding=utf-8

" Whitespace
set nowrap
set textwidth=0
set formatoptions=tcqrn1
set tabstop=8
set shiftwidth=2
set softtabstop=2
set expandtab
set noshiftround

" Cursor motion
set scrolloff=3
set backspace=indent,eol,start
set matchpairs+=<:> " use % to jump between pairs
runtime! macros/matchit.vim

" Allow hidden buffers
set hidden

" Rendering
set ttyfast

" Status bar
set laststatus=2
set statusline=%f%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]%=[POS=%04l,%04v][%p%%]\ [LEN=%L]

" Last line
set showmode
set showcmd

" Searching
"nnoremap / /\v
"vnoremap / /\v
set hlsearch
set incsearch
set ignorecase
set smartcase
set showmatch
map <leader><space> :let @/=''<cr> " clear search

" Visualize tabs and newlines
set listchars=tab:~-,eol:¶,trail:-,nbsp:%
set list
set number
set virtualedit=all
set wildmode=list:longest
set wildmenu

" Color scheme (terminal)
colors my-molokai
let g:rehash256 = 1
set t_Co=256

" My maps
map ZA :NERDTreeToggle<CR>
map ZX :TagbarToggle<CR>
nmap > >>
nmap < <<
vmap > >gv
vmap < <gv

"Open "GoFile in new tab
"nnoremap gf <C-W>gf

nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

nmap <C-o> O<Esc>
nmap <CR> o<Esc>

autocmd! bufwritepost .vimrc source %

"Use TAB instead of spaces in these files
au BufNewFile,BufRead tags set softtabstop=8 tabstop=8 shiftwidth=8 expandtab&

""""""""""""""""""""""""""""""""""""""""""""""""""
" DISPLAY IF LENGTH >80
highlight OverLength80 ctermbg=red ctermfg=white guibg=#592929
highlight OverLength160 ctermbg=green ctermfg=black guibg=#592929
au FileType sh match OverLength80 /\%81v.*/
"match OverLength160 /\%161v.*/

"""""""""""""""""""""""""""""""""""""""""""""""""
" CUSTOM CONFIGURATION FOR FILETYPE
au BufRead *.zsh-theme set filetype=sh
au BufRead *.pp set filetype=puppet
au BufRead *.bats set filetype=sh
au BufRead *.md set filetype=markdown

" editorconfig does not recognize bash scripts without extension.
" https://github.com/editorconfig/editorconfig/issues/239
" https://github.com/editorconfig/editorconfig/issues/404
au FileType sh  setlocal softtabstop=2 tabstop=2 shiftwidth=2 expandtab&

"au BufNewFile,BufRead *.sh set softtabstop=2 tabstop=2 shiftwidth=2 expandtab&
"au BufNewFile,BufRead * :HiMatchOff
"au BufNewFile,BufRead *.xsd,*.xml :HiMatchOn
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
let xml_jump_string="`"

au CursorHold,CursorHoldI * checktime

"""""""""""""""""""""""""""""""""""""""""""""
" EditorConfig
let g:EditorConfig_exclude_patterns = ['fugitive://.*','scp://.*']

"""""""""""""""""""""""""""""""""""""""""""""
" BufExplorer
nnoremap <Leader><Leader> :BufExplorerHorizontalSplit<CR>
let g:bufExplorerSplitBelow=1
let g:bufExplorerSplitHorzSize=10

"""""""""""""""""""""""""""""""""""""""""""""
"Ansible
"set up <C-Space> for omni-completion
"inoremap <Nul> <C-x><C-o>
"let g:rocannon_open_action = 'tabnew'  " alternatives: tabnew, edit

"augroup filetypedetect
"    au BufRead,BufNewFile *.yml set filetype=ansible
"augroup END

let g:ctrlp_buftag_types = {
      \ 'yaml' : '--languages=ansible --ansible-types=t',
      \ }

"""""""
" easytags
"let g:easytags_suppress_ctags_warning = 1
if filereadable("$HOME/.local/bin/ctags")
  let g:easytags_cmd = "$HOME/.local/bin/ctags"
endif
let g:easytags_async = 1
let g:easytags_by_filetype = "~/.vimtags_dir"
let g:easytags_dynamic_files = 1
set tags=./tags;
hi shFunctionTag ctermfg=35 cterm=bold

"""""""
" TAGBAR
let g:tagbar_type_ansible = {
      \ 'ctagstype' : 'ansible',
      \ 'kinds' : [
      \ 't:tasks',
      \ 'h:hosts',
      \ 'r:roles',
      \ 'l:listen',
      \ ],
      \ 'sort' : 0
      \ }

let g:tagbar_type_sh = {
      \ 'kinds':[
      \ 'f:functions',
      \ 'c:constants'
      \ ]
      \}

""""""""
" vim-ansible
augroup ansible_vim_fthosts
  autocmd!
  autocmd BufNewFile,BufRead hosts setfiletype yaml.ansible
augroup END
let g:ansible_unindent_after_newline = 1
let g:ansible_attribute_highlight = "ob"
let g:ansible_name_highlight = 'b'
"let g:ansible_extra_keywords_highlight = 1

let g:ansible_goto_role_paths = './roles,../_common/roles'
function! FindAnsibleRoleUnderCursor()
  if exists("g:ansible_goto_role_paths")
    let l:role_paths = g:ansible_goto_role_paths
  else
    let l:role_paths = "./roles"
  endif
  let l:tasks_main = expand("<cfile>") . "/tasks/main.yml"
  let l:found_role_path = findfile(l:tasks_main, l:role_paths)
  if l:found_role_path == ""
    echo l:tasks_main . " not found"
  else
    execute "tabedit " . fnameescape(l:found_role_path)
  endif
endfunction

au BufRead,BufNewFile */ansible/*.yml nnoremap gr :call FindAnsibleRoleUnderCursor()<CR>
au BufRead,BufNewFile */ansible/*.yml vnoremap gr :call FindAnsibleRoleUnderCursor()<CR>

""""""""
" vim-airline
" Disable all extensions as they incur a big slowdown
let g:airline_extensions = []

""""""""
" vim-test
nmap <silent> tn :TestNearest<CR>
nmap <silent> tf :TestFile<CR>
nmap <silent> ts :TestSuite<CR>
nmap <silent> tl :TestLast<CR>
nmap <silent> tg :TestVisit<CR>

""""""""
" bash-support

""""""""
" syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_sh_checkers = [ 'shellcheck','bashate' ]
let g:syntastic_sh_shellcheck_args = '-x '
let g:syntastic_sh_bashate_args = '-i E002,E003,E004'
" E002: Tabs are not an option in bash, it is a design feature
" E003: Related to tabs...
" E004: shfmt remove the last line, don't fight with yourself...

let g:syntastic_markdown_checkers = [ "mdl","proselint" ]
let g:syntastic_markdown_mdl_exec = 'markdownlint'
let g:syntastic_markdown_mdl_args = ''

""""""""
" vim-autoformat
let g:formatdef_my_custom_sh = '"shfmt -ci -sr"'
let g:formatters_sh = ['my_custom_sh']
"au FileType sh au BufWrite * :Autoformat
map F :Autoformat<CR>

""""""""
" SyntaxRange
autocmd Syntax sh call SyntaxRange#Include('#+BEGIN_SRC awk','#+END_SRC','awk')

""""""""
" vim-orgmode
let g:org_agenda_files=['~/org/index.org']

""""""""
" Transparent editing of gpg encrypted files.
" By Wouter Hanegraaff
augroup encrypted
  au!
  " First make sure nothing is written to ~/.viminfo while editing
  " an encrypted file.
  autocmd BufReadPre,FileReadPre *.gpg set viminfo=
  " We don't want a swap file, as it writes unencrypted data to disk
  autocmd BufReadPre,FileReadPre *.gpg set noswapfile
  " Switch to binary mode to read the encrypted file
  autocmd BufReadPre,FileReadPre *.gpg set bin
  autocmd BufReadPre,FileReadPre *.gpg let ch_save = &ch|set ch=2
  autocmd BufReadPost,FileReadPost *.gpg '[,']!gpg --decrypt 2> /dev/null
  " Switch to normal mode for editing
  autocmd BufReadPost,FileReadPost *.gpg set nobin
  autocmd BufReadPost,FileReadPost *.gpg let &ch = ch_save|unlet ch_save
  autocmd BufReadPost,FileReadPost *.gpg execute ":doautocmd BufReadPost " . expand("%:r")

  " Convert all text to encrypted text before writing
  autocmd BufWritePre,FileWritePre *.gpg '[,']!gpg --default-recipient-self -ae 2>/dev/null
  " Undo the encryption so we are back in the normal text, directly
  " after the file has been written.
  autocmd BufWritePost,FileWritePost *.gpg u
augroup END
