== Skeleton.script-set == nomenu, below ==
# new-script.templates - 2020-10-21

set -o nounset     # Treat unset variable as an error
shopt -s extglob   # Extended pattern matching

################################################################################
# Why doesn't set -e (or set -o errexit, or trap ERR) do what I expected?
# http://mywiki.wooledge.org/BashFAQ/105
#set -e             # Stop execution if there is an error
#set -o pipefail    # pass the error to the rightmost element when pipe

################################################################################
# Dependency

if [ ! -e $(which getopt) ]; then
  echo "This script require getopt, please install it"
  exit 1
fi

################################################################################
# USAGE
function usage()
{
  echo "Usage: $(basename $0) [options] command"
  echo
  echo "Examples:"
  echo "  $(basename $0) -b foobar run"
  echo
  echo "Options:"
  echo "   -h, --help                Show this message"
  echo "   -d, --debug               Show debug log"
  echo "   -v, --verbose             Show verbose log (multiple -v is --debug)"
  echo "   -q, --quiet               Show only error logs (default warn)"
  echo
  echo "   -f, --foo                 Do foo"
  echo "   -b, --bar=BAZ             Do bar with BAZ"
  echo
  echo "Commands:"
  echo "   run                       Run the program"
}

################################################################################
# MAIN
function main()
{
  echo "My program"

  .log 0 "This show an error"
  .log 1 "This show a warning"
  .log 2 "This show an info, VAR_A:$VAR_A"
  .log 3 "This show a debug, VAR_B:$VAR_B"
}

################################################################################
# LOG FUNCTION
declare -A LOG_LEVELS=(
  [0]="error"
  [1]="warn "
  [2]="info "
  [3]="debug"
)
function .log ()
{
  local LEVEL=${1}
  local COLOR=""
  shift
  if [ $COLORIZED_LOG = true ]; then
    case $LEVEL in
      0)
        COLOR="\033[31m";; # RED
      1)
        COLOR="\033[33m";; # YELLOW
      2)
        COLOR="\033[32m";; # GREEN
      3)
        COLOR="\033[34m";; # BLUE
    esac
  fi

  if [ ${LOG_LEVEL} -ge ${LEVEL} ]; then
    if [ ${LEVEL} -eq 0 ]; then
      echo -e "[${COLOR}${LOG_LEVELS[$LEVEL]}\033[0m]" "$@" 1>&2
    else
      echo -e "[${COLOR}${LOG_LEVELS[$LEVEL]}\033[0m]" "$@"
    fi
  fi
}

################################################################################
# ARGS PARSE
declare -i LOG_LEVEL=1
COLORIZED_LOG=true

VAR_A='default_value'
VAR_B='default_value'

declare -A OPTIONS=(
  ['h']='help'
  ['d']='debug'
  ['v']='verbose'
  ['q']='quiet'

  ['f']='foo'
  ['b:']='bar:'
)

IFS=','
LONG_OPTIONS="${OPTIONS[*]}"
IFS=''
SHORT_OPTIONS="${!OPTIONS[*]}"
unset IFS

#opt=$(getopt -o hvd --long help,verbose,debug -- "$@")
opt=$(getopt -o $SHORT_OPTIONS --long $LONG_OPTIONS -- "$@")
eval set -- "$opt"
while true; do
  case "$1" in
    -h | --help)
      usage
      exit 0
      ;;
    -d | --debug)
      LOG_LEVEL=3
      ;;
    -v | --verbose)
      LOG_LEVEL=$LOG_LEVEL+1
      ;;
    -q | --quiet)
      LOG_LEVEL=0
      ;;
    -f | --foo)
      VAR_A='foobar'
      ;;
    -b | --bar)
      shift
      VAR_B=$1
      ;;
    --)
      shift
      break
      ;;
    *)
      .log 0 "No such parameter: '$1'"
      exit 1
      ;;
  esac
  shift
done

################################################################################
# Start functions
case "$1" in
  run)
    main
    ;;
  *)
    .log 0 "No such command: $1"
    .log 0 "See --help for more details"
    exit 1
    ;;
esac
== ENDTEMPLATE ==
