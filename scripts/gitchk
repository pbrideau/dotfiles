#!/bin/bash

if ! command -v lastversion &> /dev/null; then
	echo "This program require 'lastversion', you can install it with:"
	echo "pip3 install --user lastversion"
	exit 1
fi

function gitchk {
	declare -A GIT_PACKAGE_TO_CHECK
	declare -A GIT_PACKAGE_TO_IGNORE
	declare -A GIT_PACKAGE_VERSION
	declare -A GIT_PACKAGE_PRE_RELEASE

	# shellcheck disable=SC1090
	source "$HOME/.gitchkrc"

	local latest_version current_version
	local chk version
	local git_url='https://github.com'
	local asset_url=''

	declare -i git_to_update=0
	echo "Checking latest versions from ${git_url}"
	for p in "${!GIT_PACKAGE_TO_CHECK[@]}"; do
		asset_url=''
		if ! command -v "$p" &> /dev/null; then
			chk="[$(tput setaf 3)-$(tput sgr0)]"
			version="(not currently installed)"
			if [ -n "${GIT_PACKAGE_PRE_RELEASE[$p]}" ]; then
				asset_url=$(
					lastversion --asset \
						"${GIT_PACKAGE_PRE_RELEASE[$p]}" \
						"${git_url}/${GIT_PACKAGE_TO_CHECK[$p]}" |
						grep -E "(x86_64|amd64)" |
						grep -Ev '\.(sha256|deb)'
				)
			else
				asset_url=$(
					lastversion --asset \
						"${git_url}/${GIT_PACKAGE_TO_CHECK[$p]}" |
						grep -E "(x86_64|amd64)" |
						grep -Ev '\.(sha256|deb)'
				)
			fi
		else
			if [ -n "${GIT_PACKAGE_PRE_RELEASE[$p]}" ]; then
				latest_version=$(
					lastversion "${GIT_PACKAGE_PRE_RELEASE[$p]}" \
						"${git_url}/${GIT_PACKAGE_TO_CHECK[$p]}"
				)
			else
				latest_version=$(
					lastversion "${git_url}/${GIT_PACKAGE_TO_CHECK[$p]}"
				)
			fi
			current_version="${GIT_PACKAGE_VERSION[$p]}"
			if [ "$latest_version" = "${GIT_PACKAGE_TO_IGNORE[$p]}" ]; then
				chk="[$(tput setaf 2)✔$(tput sgr0)]"
				version="$current_version (ignored: $latest_version)"
			elif [ "$current_version" != "$latest_version" ]; then
				chk="[$(tput setaf 1)✘$(tput sgr0)]"
				version="$current_version (latest: $latest_version)"
				git_to_update+=1
				if [ -n "${GIT_PACKAGE_PRE_RELEASE[$p]}" ]; then
					asset_url=$(
						lastversion --asset \
							"${GIT_PACKAGE_PRE_RELEASE[$p]}" \
							"${git_url}/${GIT_PACKAGE_TO_CHECK[$p]}" |
							grep -E "(x86_64|amd64)" |
							grep -Ev '\.(sha256|deb)'
					)
				else
					asset_url=$(
						lastversion --asset \
							"${git_url}/${GIT_PACKAGE_TO_CHECK[$p]}" |
							grep -E "(x86_64|amd64)" |
							grep -Ev '\.(sha256|deb)'
					)
				fi
			else
				chk="[$(tput setaf 2)✔$(tput sgr0)]"
				version="$current_version"
			fi
		fi
		url="${git_url}/${GIT_PACKAGE_TO_CHECK[$p]}"
		if [ "$asset_url" != '' ]; then
			printf "%s %-20s %-50s %s\n    %s\n" "$chk" "$p" "$url" "$version" "$asset_url"
		else
			printf "%s %-20s %-50s %s\n" "$chk" "$p" "$url" "$version"
		fi
	done

	echo "$git_to_update" > "$HOME/.gitchk_count"

}

gitchk
